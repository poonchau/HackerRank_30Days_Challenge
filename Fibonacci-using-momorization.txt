1. Top-down approach T.C O(n) and  S.C O(n) + O(n) (extra O(n) because of memo)
function fibonicci(n, memo){
    //Base case
    if(n==0){
        return 0
    }
    if(n==1){
        return 1;
    }
    //Momorization
    if(memo[n]){
        return memo[n];
    }

    ans = fibo(n-1, memo) + fibo(n-2, memo);
    memo[n] = ans;
    return ans;
}

console.log(fibo(6,{}));

2. Bottom-up approach Time Complexity : O(n), Space Complexity : O(n)
function fibo(n, dp){
dp[0] = 0;
dp[1] = 1;

for(let i=2; i<=n; i++){
   ans =  dp[i-1] + dp[i-2];
   dp[i] = ans;
}
return dp[n];
}
console.log(fibo(4,{}));
