Promise.race()
The Promise.race() method takes an iterable of promises as input and returns a single Promise. 
This returned promise settles with the eventual state of the first promise that settles.

example1
const promise1 = new Promise((resolve, reject) => {
  setTimeout(resolve, 500, 'one');
});

const promise2 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'two');
});

Promise.race([promise1, promise2]).then((value) => {
  console.log(value);     // Both resolve, but promise2 is faster , hence output is "two"
});

example2
const p1 = new Promise((res)=>{
	setTimeout(()=> res('One'),2000);
})

const p1 = new Promise((res,rej)=>{
	setTimeout(()=> rej('Two'),1000);
});

Promise.race([p1,p2]).then((res)=> {
	console.log("result",res);
	}).catch((err)=> {
		console.log("error", err);
	});
	
D] error Two	C] error One  B] result Two A] result One

explaination 
Ans: error Two
Promise.race() uses an array of tasks which will return promises. 
Promise.race() will get either rejected or resolved on the basis of the first promise result (from any array of tasks). 
In the above, case p1 also logs a callback and p2 as well. 
But p2 gets finished first (i.e 1 sec) and p2 function is rejecting a promise with message Two.
As soon as any promise result is received to Promise.race() that will be considered as answer and then further catch block is executed.
