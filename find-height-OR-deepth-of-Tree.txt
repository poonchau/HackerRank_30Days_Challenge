GFG
Height of Binary Tree
Medium

Algorithm:
1.most important check in case not a single root exist if(node) return 
2.first I'll traverse the left side of root node, 
  once we reach end where node have pointing to null i.e if(node==NULL) return ;
3.then I'll traverse the right side of root node
  once we reach end where node have pointing to null i.e if(node==NULL) return ;
and then I'll find max(left,right) + 1


In JS 
class Node{
    constructor(data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}
*/

class Solution {
    //Function to find the height of a binary tree.
    height(node)
    {
        if (node == null) return -1; // in case root is null, i.e node not exist
        //your code here
        function _depth(node) {
          if (node == null) return 0;  // once either left or right of tree reaches end of the tree
          let leftDepth = _depth(node.left) + 1;
          let rightDepth = _depth(node.right) + 1;
        
          return Math.max(leftDepth, rightDepth);
        }
        
       return _depth(node);
    }
}

In CPP
////////////////////////////////////////////
executed on GFG Practics 
    class Solution{
    public:
    //Function to find the height of a binary tree.
    int height(struct Node* node){ 
        // code here 
        if(node==NULL) return 0;
        
        int left = height(node->left);
        int right = height(node->right);
        
        int ans = max(left, right) + 1;
        return ans;
    }
};

instead of using a new variable ans , we can do return max(left, right) + 1;

        
        
 
